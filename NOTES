*** Predicate Optimization

Baseline Optimization
=====================

Reduces Flat Contracts
----------------------

Reduces all flat contracts that can be checked at compile time. In particular
this are all:

i) c @ (flat e) 
ii) \ x e @ (flat e)

Only c @ (flat e) expressions remain.

Reduce Function Contracts
-------------------------

Reduces all function contracts on non-function objects.

c @ (C -> D)

Only function contracts on function (contracted functions) remain.



Base/Native Operations
----------------------

- Use hard coded contracts to wrap native operations
- and use the contact version instead of the original one.

- Thus, instead of using plus (+), we can use + @ Num,Num->Num
- The contract should be as precises as possible.
- We than can check the input/ and use the range contract for lifting


Notes
=====

- unfold/unroll are "blame preserving" rules
- the do only the those operation which would otherwise be done at runtime.

- lift is also "blame preserving" as it does only earlier checking of the
- contract, and because the rules preserve the order of the checked contract
- it did not change the semantics

- Only, collapse needs to give a special consideration to blame preservation.

- Use: 
-- flatten (alternative to unfold/ or to unroll an intersectiopn)
-- plasticize (to create new function contracts)



Blame Preservation
==================

Contract Optimization needs to preserve blaming.
Thus, contarcts must be checked in the same order, as they would be check in the normal code.


